function estimateBlockingTime() {
    console.log("Function executing...");
    const resources = performance.getEntriesByType("resource");
    console.log(resources.length);
    let totalBlocking = 0;
    let lastEventTime = performance.now();
  
    for (const resource of resources) {
        // Consider potential blocking based on resource type and size
        const blockingFactor = calculateBlockingFactor(resource);
        console.log('Blocking factor: ${blockingFactor}');
        totalBlocking += (resource.responseEnd - resource.startTime) * blockingFactor;
  
        // Heuristic for main thread blocking during gaps
        const timeSinceLastEvent = performance.now() - lastEventTime;
        if (timeSinceLastEvent > 50) { 
            totalBlocking += timeSinceLastEvent - 50;
            console.log('Total blocking: ${totalBlocking}');
        }
        lastEventTime = performance.now(); 
        console.log('Last event time: ${lastEventTime}');
    }
  
    return totalBlocking;
  }
  
  function calculateBlockingFactor(resource) {
      // Larger resources and certain types have higher potential to block
      if (resource.transferSize > 500 * 1024) { // 500KB+
          return 0.8; // Example: Assume a high blocking probability
      } else if (['script', 'stylesheet', 'font'].includes(resource.initiatorType)) {
          return 0.5; // Example: Moderate blocking probability
      } else {
          return 0.2; // Lower probability for other resource types 
      }
  }
  
return estimateBlockingTime();